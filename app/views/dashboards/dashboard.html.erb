<div class='dashboard-all' data-controller='navbar-slider popover'>
  <div class="dashboard-main-body" data-navbar-slider-target="mainbody">
    <p class='open-icon cursor-pointer hidden' data-action="click->navbar-slider#open" data-navbar-slider-target="close">&#187;</p>
    <%= month_calendar(events: @events) do |date, events| %>
      <%= date.strftime("%d") %>
      <% events.each_with_index do |event, index| %>
        <% bg_color = event.user == current_user ? @user_color : @friends_colors[index] %>
            <div class="event" data-controller='event-hover' data-event-hover-events-value='<%= @eventarray %>' style="background-color: <%= bg_color %>;" data-action='click->event-hover#show' data-event-hover-target='border' data-event-color-target='background'>
              <div class='event-username event-user-<%= event.user_id %>'><%= event.user.full_name %></div>
              <div class='hidden' data-event-hover-target='info'>
                <div class='event-times'>Title: <%= event.summary %></div>
                <div class='event-times'>Start <i class="fa-solid fa-clock"></i>: <%= event.start_time.strftime('%H') %></div>
                <div class='event-times'>End <i class="fa-solid fa-clock"></i >: <%= event.end_time.strftime('%H') %></div>
              </div>
            </div>
      <% end %>
    <% end %>
  </div>
  <div class="dashboard-navbar" data-navbar-slider-target="navbar">
  <p class="close-icon cursor-pointer" data-action="click->navbar-slider#close">x</p>
      <%= image_tag("logo.png",  :class => "logo-navbar") %>
    <% if current_user %>
      <h2 class="navbar-welcome"><span class="welcome">Welcome<br></span> <%= current_user.full_name.match(/[^ ]+/) %>!</h2><!-- <%= current_user.email.match(/[^@]+/) %>!</h2> -->
        <div class="google-api-buttons">
      <!--Add buttons to initiate auth sequence and sign out-->
      <button id="authorize_button" onclick="handleAuthClick()" class="navbutton button orange">Sync</button>

    </div>
        <!-- these next 3 lines are the select friends form copy and pasted, while removing the ability to actually select friends -->
        <form action="<%= dashboard_path %>" method="get" >
          <button type="submit" class="button navbutton">Clear</button>
        </form>
        <%= button_to "My Account", edit_user_registration_path, class: "navbutton button"%>
        <%= button_to "My Friends", edit_user_registration_path, class: "navbutton button" %>
        <%= button_to "Logout", destroy_user_session_path, data: {turbo: "false"}, method: :delete, class: "navbutton button logout-button" %>
      <% else %>
        <%= link_to "Login", new_user_session_path %>
      <% end %>

  </div>
</div>

<div hidden>
  <form action="<%= dashboard_path %>" method="get">
      <% @friends.each do |friend| %>
        <input
          type="checkbox"
          name="friends[<%= friend.id %>]"/>
        <label for="friends[<%= friend.id %>]" <%= friend.full_name %>> <%= friend.full_name%></label>
      <% end %>

      <button type="submit">Check their calendar!</button>
  </form>
</div>

<div class='leaf1'></div>
<div class='leaf2'></div>
<div class='leaf3'></div>
<div class='leaf4'></div>
<div class='leaf5'></div>
<div class='leaf6'></div>
<div class='leaf7'></div>


  <!--Add buttons to initiate auth sequence and sign out-->


    <script type="text/javascript">
      /* exported gapiLoaded */
      /* exported gisLoaded */
      /* exported handleAuthClick */
      /* exported handleSignoutClick */

      // TODO(developer): Set to client ID and API key from the Developer Console
      const CLIENT_ID = "427201548327-q230pcb2l8jih4f366r74mirc2jp8tp3.apps.googleusercontent.com";
      const API_KEY = "AIzaSyAGjj9ew8RPbX2yGY4kNUfpWThuML8y_G4";

      // Discovery doc URL for APIs used by the quickstart
      const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest';

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      const SCOPES = 'https://www.googleapis.com/auth/calendar';

      let tokenClient;
      let gapiInited = false;
      let gisInited = false;

      /**
       * Callback after api.js is loaded.
       */
      function gapiLoaded() {
        gapi.load('client', initializeGapiClient);
      }

      /**
       * Callback after the API client is loaded. Loads the
       * discovery doc to initialize the API.
       */
      async function initializeGapiClient() {
        await gapi.client.init({
          apiKey: API_KEY,
          discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
        maybeEnableButtons();
      }

      /**
       * Callback after Google Identity Services are loaded.
       */
      function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: '', // defined later
        });
        gisInited = true;
        maybeEnableButtons();
      }

      /**
       * Enables user interaction after all libraries are loaded.
       */
      function maybeEnableButtons() {
        if (gapiInited && gisInited) {
          document.getElementById('authorize_button').style.visibility = 'visible';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick() {
        tokenClient.callback = async (resp) => {
          if (resp.error !== undefined) {
            throw (resp);
          }
          await listUpcomingEvents();
        };

        if (gapi.client.getToken() === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({prompt: 'consent'});
        } else {
          // Skip display of account chooser and consent dialog for an existing session.
          tokenClient.requestAccessToken({prompt: ''});
        }
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick() {
        const token = gapi.client.getToken();
        if (token !== null) {
          google.accounts.oauth2.revoke(token.access_token);
          gapi.client.setToken('');
          document.getElementById('content').innerText = '';
        }
      }

      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      async function listUpcomingEvents() {
        let response;
        try {
          const request = {
            'calendarId': 'primary',
            'timeMin': (new Date()).toISOString(),
            'showDeleted': false,
            'singleEvents': true,
            'maxResults': 10,
            'orderBy': 'startTime',
          };
          response = await gapi.client.calendar.events.list(request);
          console.log(response)
          fetch("/create-events-google", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(response)
          })
            .then(responses => responses.json())
            .then((data) => {
              console.log("THIS IS THE DATA")
              console.log(data)
          })
            .then(data => window.location.reload())

        } catch (err) {
          //document.getElementById('content').innerText = err.message;
          return;
        }

        const events = response.result.items;
        if (!events || events.length == 0) {
          //document.getElementById('content').innerText = 'No events found.';
          return;
        }
        // Flatten to string to display
        const output = events.reduce(
            (str, event) => `${str}${event.summary} (${event.start.dateTime || event.start.date})\n`,
            'Events:\n');
        //document.getElementById('content').innerText = output;
      }
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
</div>
